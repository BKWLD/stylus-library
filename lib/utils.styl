/**
 * Enable GPU caching of elements, which can fix weird layout issues but can
 * lead to fuzziness in text and other fine lines
 */
gpu-cache()
	backface-visibility hidden
	transform translate3d(0,0,0)

/**
 * Clearfix using psuedo elements.
 * http://nicolasgallagher.com/micro-clearfix-hack/
 */
clearfix()
	&:after
		content ""
		display table
		clear both

/**
 * Scale a property value between min-size and max-size with the width of the
 * viewport until it is below the min-break or above the max-break values.  
 * The values MUST BE UNITLESS.  This was done so that this could be used with 
 * CSS vars (ex: var(--)) and I could find no way in stylus to test for whether 
 * an argument was a css var or not; I kept getting fatal errors.
 *
 * Example:
 *
 * .div
 *
 *   // Scales padding between 40px (desktop) and 20px (mobile, 375px)
 *   fluid padding, 40 
 *
 *   // Scales font-size between 72px and 32px
 *   fluid font-size, 72, 32 
 *
 *   // Scales margin-top from 60px down to 20px, stopping when the browser
 *   // reaches 768px wide
 *   fluid(margin-top, 60, 20, min-break: 768)
 */
fluid(property,
	max-size,
	min-size = null,
	max-break = null,
	min-break = 375)

	// The multiplier applied when no min-width was set
	fluid-auto-min-size-factor ?= 0.5

	// Default max-break to the max-width
	unless max-break
		max-break = unit(max-w, '')

	// Return the calc expression that sets a scaling value
	if min-size != null
		{property} 'calc(%s * 1px + (%s - %s)/(%s - %s) * (100vw - %s * 1px))' % (min-size max-size min-size max-break min-break min-break)
	else
		{property} 'calc(%s * 1px * %s + (%s - %s * %s)/(%s - %s) * (100vw - %s * 1px))' % (max-size fluid-auto-min-size-factor max-size max-size fluid-auto-min-size-factor max-break min-break min-break)

	// Cap it to min size when small
	@media(max-width min-break * 1px)
		if min-size != null
			{property} 'calc(%s * 1px)' % min-size
		else
			{property} 'calc(%s * 1px * %s)' % (max-size fluid-auto-min-size-factor)

	// Cap it to max size when large
	@media(min-width max-break * 1px)
		{property} 'calc(%s * 1px)' % max-size


/**
 * Adjust the provided property across a range of created media queries.
 *
 * @param property property A CSS property
 * @param number max-value  The value of the property at the max-width
 * @param number min-value  The value of the property at the min-width
 * @oaram unit max-width    The first break will be 1px narrower than this width
 * @oaram unit min-width    The final max-width break will be at this size
 * @param integer steps     How many breakpoints to create in between
 */
mq-values(property, max-value, min-value, max-width = 1400px, min-width = 500px, steps = 6)

	// Set intial value, essentially the widest browser setting
	{property} max-value

	// Loop through the range
	for i in 0...steps

		// If the first step, make the break 1 less that the max-width.  This makes
		// this function's API easier to understand, it makes it so the max-value
		// is available at the max-width but then the first break immediately follows.
		break = max-width - floor((max-width - min-width) * i / (steps - 1))
		if i == 0
			break -= 1px

		// Set the media query and value
		@media (max-width: break)
			{property} max-value - ((max-value - min-value) * (i + 1) / steps)


/**
 * Use vws for the unit of a prop until the break is reached
 *
 * @param prop property   A CSS property (without quotes)
 * @param number size     The vw value as a number
 * @param break unit(px)  The min-width breakpoint to switch to pixe;s
 */
vw-until(prop, size, break = max-w)
	size = unit(size, '')
	{prop} unit(size, vw)
	@media(min-width break)
		{prop} break * (size / 100)
